#include "stdafx.h"
#include "iostream"
#include "iomanip"
#include "stdlib.h"
#include "time.h"
using namespace std;

#pragma hdrstop



#pragma argsused
const int rowSize = 5, columnSize = 5;

void PrintArray(const int[][columnSize], int);

void SortArray(int[][columnSize], int);

void FillArray(int[][columnSize], int);

void Matrix(int[][columnSize], int);

int main(int argc, char* argv[])
{
	int array[rowSize][columnSize];

	srand(time(NULL));

	FillArray(array, rowSize);
	cout << "Massiv do sortirovki " << endl;
	PrintArray(array, rowSize);
	SortArray(array, rowSize);
	cout << "Massiv posle sortirovki " << endl;
	PrintArray(array, rowSize);

	system("pause");
	return 0;
}

void PrintArray(const int ar[][columnSize], int rowSize)
{
	for (int i = 0; i < rowSize; i++)
	{
		for (int j = 0; j < columnSize; j++)
		{
			cout << setw(3) << ar[i][j];
		}
		cout << endl;
	}
}

void SortArray(int ar[][columnSize], int rowSize)
{
	int buf = 0, cyc = rowSize;

	for (int j = 0; j < columnSize; j++)
	{
		for (int i = 0; i < rowSize; i++)
		{
			for (int c = 0; c < cyc - 1; c++)
			{
				if (ar[c][j] > ar[c + 1][j])
				{
					buf = ar[c][j];
					ar[c][j] = ar[c + 1][j];
					ar[c + 1][j] = buf;
				}

			}
			cyc--;
		}
		cyc = rowSize;
	}


}

void FillArray(int ar[][columnSize], int rowSize)
{
	for (int i = 0; i < rowSize; i++)
	{
		for (int j = 0; j < columnSize; j++)
			ar[i][j] = rand() % 100;
	}
}

void Matrix(int[][columnSize], int product, int geometric_averange)
{
	for (int i = 0; i < rowSize; i++)
	{
		for (int j = 0; j < columnSize; j++)
			double geometric_averange = pow(
			(product), (1. / (rowSize - 1)));
		if (product < 0 && (columnSize - 1) % 2 == 1)geometric_averange *= -1.0;
		cout << "geometric_averange of sums = " << geometric_averange << endl;
	}
	system("pause");
}